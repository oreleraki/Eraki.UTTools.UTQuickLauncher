<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>